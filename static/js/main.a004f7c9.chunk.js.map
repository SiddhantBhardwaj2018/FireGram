{"version":3,"sources":["firebase/config.js","hooks/useFirestore.js","comps/ImageGrid.js","comps/Modal.js","comps/Title.js","hooks/useStorage.js","comps/ProgressBar.js","comps/UploadForm.js","App.js","index.js"],"names":["firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","projectStorage","projectFirestore","timestamp","FieldValue","serverTimestamp","useFirestore","collection","useState","docs","setDocs","useEffect","unsub","orderBy","onSnapshot","snap","documents","forEach","doc","push","data","id","ImageGrid","setSelectedImage","useFireStore","console","log","className","map","div","key","whileHover","opacity","layout","onClick","url","img","src","alt","initial","animate","transition","delay","Modal","selectedImage","e","target","classList","contains","y","Title","useStorage","file","progress","setProgress","error","setError","setUrl","storageRef","ref","name","collectionRef","put","on","percentage","bytesTransferred","totalBytes","err","a","getDownloadURL","createdAt","add","ProgressBar","setFile","width","UploadForm","types","type","onChange","selected","files","includes","style","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a004f7c9.chunk.js","sourcesContent":["import * as firebase from 'firebase/app';\r\nimport 'firebase/storage';\r\nimport 'firebase/firestore';\r\n\r\n// Your web app's Firebase configuration\r\nvar firebaseConfig = {\r\n  apiKey: \"AIzaSyAxsBmaih7GhkCe5lDA-HVTX1i5IQrroNc\",\r\n  authDomain: \"siddhant-firegram.firebaseapp.com\",\r\n  databaseURL: \"https://siddhant-firegram.firebaseio.com\",\r\n  projectId: \"siddhant-firegram\",\r\n  storageBucket: \"siddhant-firegram.appspot.com\",\r\n  messagingSenderId: \"302748255218\",\r\n  appId: \"1:302748255218:web:9145312a48f400e3e3e16b\",\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nconst projectStorage = firebase.storage();\r\nconst projectFirestore = firebase.firestore();\r\nconst timestamp = firebase.firestore.FieldValue.serverTimestamp;\r\n\r\nexport { projectStorage, projectFirestore, timestamp };","import { useState, useEffect } from 'react';\r\nimport { projectFirestore } from '../firebase/config';\r\n\r\nconst useFirestore = (collection) => {\r\n  const [docs, setDocs] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const unsub = projectFirestore.collection(collection)\r\n      .orderBy('createdAt', 'desc')\r\n      .onSnapshot(snap => {\r\n        let documents = [];\r\n        snap.forEach(doc => {\r\n          documents.push({...doc.data(), id: doc.id});\r\n        });\r\n        setDocs(documents);\r\n      });\r\n\r\n    return () => unsub();\r\n    // this is a cleanup function that react will run when\r\n    // a component using the hook unmounts\r\n  }, [collection]);\r\n\r\n  return { docs };\r\n}\r\n\r\nexport default useFirestore;\r\n","import React from 'react';\r\nimport useFireStore from '../hooks/useFirestore'\r\nimport { motion } from 'framer-motion'\r\n\r\nconst ImageGrid = ({ setSelectedImage }) => {\r\n    const { docs } = useFireStore('images');\r\n    console.log(docs)\r\n\r\n    return (\r\n        <div className=\"img-grid\">\r\n           { docs && docs.map(doc => (\r\n               <motion.div className=\"img-wrap\" key={doc.id} whileHover={{ opacity: 1 }}\r\n               layout   onClick = {() => setSelectedImage(doc.url)} >\r\n                   <motion.img src={doc.url} alt=\"uploaded pic\" \r\n                    initial = {{opacity: 0}} animate = {{ opacity: 1 }} transition = {{ delay: 1 }} />\r\n               </motion.div>\r\n        )) }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ImageGrid;","import React from 'react'\r\nimport { motion } from \"framer-motion\"; \r\n\r\nconst Modal = ({selectedImage,setSelectedImage}) => {\r\n\r\n    const handleClick = (e) => {\r\n        if(e.target.classList.contains('backdrop')){\r\n            setSelectedImage(null);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <motion.div className=\"backdrop\" onClick={handleClick} initial = {{ opacity: 0 }} animate = {{ opacity: 1 }} >\r\n            <motion.img src={selectedImage} alt=\"enlarged pic\" initial = {{ y: \"-100vh\" }} animate = {{ y : 0}} />\r\n        </motion.div>\r\n    )\r\n}\r\n\r\nexport default Modal\r\n","import React from 'react';\n\nconst Title = () => {\n  return (\n    <div className=\"title\">\n      <h1>FireGram</h1>\n      <h2>Your Pictures</h2>\n      <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>\n    </div>\n  )\n}\n\nexport default Title;","import { useState, useEffect } from 'react';\r\nimport { projectStorage, projectFirestore, timestamp } from '../firebase/config';\r\n\r\nconst useStorage = (file) => {\r\n    const [progress, setProgress] = useState(0);\r\n    const [error, setError] = useState(null);\r\n    const [url, setUrl] = useState(null);\r\n\r\n    useEffect(() => {\r\n        //references\r\n        const storageRef = projectStorage.ref(file.name);\r\n        const collectionRef = projectFirestore.collection('images')\r\n\r\n        storageRef.put(file).on('state_changed',(snap) => {\r\n            let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\r\n            setProgress(percentage);\r\n        },(err) => {\r\n            setError(err);\r\n        },async () => {\r\n            const url = await storageRef.getDownloadURL();\r\n            const createdAt = timestamp();\r\n            collectionRef.add({ url, createdAt  })\r\n            setUrl(url);\r\n        })\r\n    },[file])\r\n\r\n    return { progress, url, error }\r\n}\r\n\r\nexport default useStorage;","import React, {useEffect } from \"react\";\r\nimport useStorage from \"../hooks/useStorage\";\r\nimport { motion } from \"framer-motion\"\r\n\r\nconst ProgressBar = ({ file,setFile }) => {\r\n\r\n    const {url, progress} = useStorage(file);\r\n\r\n    useEffect(() => {\r\n        if(url){\r\n            setFile(null);\r\n        }\r\n    }, [url])\r\n\r\n    return (\r\n        <motion.div className=\"progress-bar\" initial = {{width: 0}} animate = {{ width: progress + '%' }} >\r\n        </motion.div>\r\n    )\r\n}\r\n\r\nexport default ProgressBar","import React, { useState } from \"react\";\r\nimport ProgressBar from \"./ProgressBar\";\r\n\r\nconst UploadForm = () => {\r\n  const [file, setFile] = useState(null);\r\n  const [error, setError] = useState(null);\r\n\r\n  const types = [\"image/png\", \"image/jpeg\"];\r\n\r\n  const changeHandler = (e) => {\r\n    let selected = e.target.files[0];\r\n\r\n    if (selected && types.includes(selected.type)) {\r\n      setFile(selected);\r\n      setError(\"\");\r\n    } else {\r\n      setFile(null);\r\n      setError(\"Please select an image (png or jpeg) \");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form>\r\n      <label>\r\n        <input type=\"file\" onChange={changeHandler} style={{'display': 'none'}} />\r\n         <span>+</span>\r\n      </label>\r\n      <div className=\"output\" >\r\n        {error && <div className=\"error\">{error}</div>}\r\n        {file && <div>{file.name}</div>}\r\n        { file && <ProgressBar file = {file} setFile={setFile}  /> }\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default UploadForm;\r\n","import React, { useState } from 'react';\nimport ImageGrid from './comps/ImageGrid';\nimport Modal from './comps/Modal';\nimport Title from './comps/Title';\nimport UploadForm from './comps/UploadForm';\n\nfunction App() {\n\n  const [selectedImage, setSelectedImage] = useState(null);\n\n  return (\n    <div className=\"App\">\n      <Title/>\n      <UploadForm />\n      <ImageGrid setSelectedImage = {setSelectedImage} />\n  { selectedImage &&  <Modal selectedImage = {selectedImage} setSelectedImage={setSelectedImage} /> }\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA"],"sourceRoot":""}